<Containers::SearchBox
  @driver={{@driver}}
  @view={{@view}}
  @autocompleteMinimumCharacters={{@autocompleteMinimumCharacters}}
  @autocompleteResults={{@autocompleteResults}}
  @autocompleteSuggestions={{@autocompleteSuggestions}}
  @autocompleteView={{@autocompleteView}}
  @shouldClearFilters={{@shouldClearFilters}}
  @debounceLength={{@debounceLength}}
  @inputProps={{@inputProps}}
  @inputView={{@inputView}}
  @onSelectAutocomplete={{@onSelectAutocomplete}}
  @onSubmit={{@onSubmit}}
  @searchAsYouType={{@searchAsYouType}}
  ...attributes as |state|
>
  <BasicDropdown @matchTriggerWidth={{true}} as |dd|>
    <form {{on "submit" state.onSubmit}}>
      <dd.Trigger
        class={{concat "sui-search-box " (if dd.isOpen "autocomplete")}}
      >
        {{component
          (if state.inputView state.inputView "search-input")
          value=state.value
          onChange=state.onChange
          isFocused=state.isFocused
          inputProps=state.inputProps
          didInsertInput=this.didInsertInput
          onOpen=(fn this.open dd)
          onFocus=(optional state.inputProps.onFocus)
          onBlur=(optional state.inputProps.onBlur)
        }}
      </dd.Trigger>
      <dd.Content>
        {{#if
          (and
            dd.isOpen
            state.useAutocomplete
            (gt state.allAutocompletedItemsCount 0)
          )
        }}
          {{component
            (if state.autocompleteView state.autocompleteView "autocomplete")
            autocompleteResults=state.autocompleteResults
            autocompletedResults=state.autocompletedResults
            autocompleteSuggestions=state.autocompleteSuggestions
            autocompletedSuggestions=state.autocompletedSuggestions
          }}
        {{/if}}
      </dd.Content>
    </form>
  </BasicDropdown>
</Containers::SearchBox>